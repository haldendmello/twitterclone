"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var interfaces_1 = require("../interfaces");
var _contexts = {};
exports.AppProvider = function (data) {
    var providers = [];
    var contexts = data.contexts, children = data.children;
    // init context
    Object.keys(contexts).forEach(function (name) {
        var _a = contexts[name], Provider = _a.Provider, Consumer = _a.Consumer;
        _contexts[name] = { Provider: Provider, Consumer: Consumer, status: interfaces_1.ContextStatuses.PENDING };
    });
    // create providers graph
    var resolveDependenciesAndAdd = function (context) {
        if (context.status === interfaces_1.ContextStatuses.INCLUDED) {
            return;
        }
        if (context.status === interfaces_1.ContextStatuses.PROCESSING) {
            throw new Error("Cyclic dependency was detected.");
        }
        context.status = interfaces_1.ContextStatuses.PROCESSING;
        if (context.Provider.contextDependency) {
            context.Provider.contextDependency.forEach(function (contextName) {
                resolveDependenciesAndAdd(_contexts[contextName]);
            });
        }
        providers.push(context.Provider);
        context.status = interfaces_1.ContextStatuses.INCLUDED;
    };
    Object.keys(_contexts).forEach(function (contextName) {
        resolveDependenciesAndAdd(_contexts[contextName]);
    });
    // check if any contexts were setted
    if (providers.length === 0) {
        return children || null;
    }
    return providers
        .reverse()
        .reduce(function (store, Provider) { return React.createElement(Provider, null, store); }, children);
};
exports.AppProvider.displayName = 'AppProvider';
// Get contexts to calculate dependencies in use HOC
exports.getCurrentContexts = function () {
    return _contexts;
};
