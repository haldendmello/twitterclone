"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var hoistStatics = require("hoist-non-react-statics/dist/hoist-non-react-statics.cjs");
var AppProvider_1 = require("./AppProvider");
exports.use = function (context) { return function (Component) {
    var contexts = context;
    if (typeof context === 'string') {
        contexts = [context];
    }
    var Wrap = /** @class */ (function (_super) {
        __extends(Wrap, _super);
        function Wrap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Render a react subTree without intermediate components.
         * So we can get a clear subtree (with recursion):
         * ```
         *  <Consumer1>
         *    {value1 =>
         *      <Consumer2>
         *        {value2 =>
         *          <YourWrappedComponent name1={value1} name2={value2} />
         *        }
         *      </Consumer2>
         *    }
         *  </Consumer1>
         * ```
         * instead of (without recursion):
         * ```
         *  <Consumer1>
         *    {value1 =>
         *      <Wrap name1={value1}>
         *        <Consumer2>
         *          {value2 =>
         *            <YourWrappedComponent name1={value1} name2={value2} />
         *          }
         *        </Consumer2>
         *      </Wrap>
         *    }
         *  </Consumer1>
         * ```
         */
        Wrap.prototype.renderPreparedMap = function (contextNames, contextMap) {
            var _this = this;
            var propsMap = {};
            var renderItem = function (index) {
                if (index === contextNames.length) {
                    return React.createElement(Component, __assign({}, _this.props, propsMap));
                }
                var contextName = contextNames[index];
                var Consumer = contextMap[contextName].Consumer;
                return (React.createElement(Consumer, null, function (props) {
                    propsMap[contextName] = props;
                    return renderItem(index + 1);
                }));
            };
            return renderItem(0);
        };
        Wrap.prototype.renderUsingArray = function (contextArray) {
            var nameWithoutSuchContext = contextArray.find(function (contextName) { return !AppProvider_1.getCurrentContexts().hasOwnProperty(contextName); });
            if (nameWithoutSuchContext) {
                throw new Error("There is no such context name " + nameWithoutSuchContext + ".");
            }
            return this.renderPreparedMap(contextArray, AppProvider_1.getCurrentContexts());
        };
        Wrap.prototype.renderUsingDict = function (contextDict) {
            var propsMap = {};
            return this.renderPreparedMap(Object.keys(contextDict), contextDict);
        };
        Wrap.prototype.render = function () {
            if (Array.isArray(contexts)) {
                return this.renderUsingArray(contexts);
            }
            return this.renderUsingDict(contexts);
        };
        Wrap.displayName = "use(" + (Component.displayName || Component.name) + ")";
        return Wrap;
    }(React.Component));
    // Describe dependencies to automatically resolver
    if (Component.contextDependency && Array.isArray(Component.contextDependency)) {
        if (Array.isArray(contexts)) {
            Wrap.contextDependency = __spreadArrays(Component.contextDependency, contexts);
        }
        else {
            // We detect dependencies between different context using there names
            Wrap.contextDependency = __spreadArrays(Component.contextDependency, Object.keys(contexts));
        }
    }
    else {
        if (Array.isArray(contexts)) {
            Wrap.contextDependency = contexts;
        }
        else {
            // We detect dependencies between different context using there names
            Wrap.contextDependency = Object.keys(contexts);
        }
    }
    return hoistStatics(Wrap, Component);
}; };
